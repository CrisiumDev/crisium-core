// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "operator-filter-registry/src/DefaultOperatorFilterer.sol";
import "../extensions/ERC721Resale.sol";
import "../utils/IBatchMintable.sol";
import "../utils/IPFSLibrary.sol";

abstract contract IMSpaceAccessToken is
    Context,
    AccessControlEnumerable,
    DefaultOperatorFilterer,
    ERC721Enumerable,
    ERC721Resale,
    IBatchMintable
{
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant ROYALTY_ROLE = keccak256("ROYALTY_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    // Operator filterer
    bool public filterOperators = true;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) ERC721(name, symbol) {
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(ROYALTY_ROLE, _msgSender());

        require(IPFSLibrary.uriSeemsValid(baseTokenURI), "ERC721Metadata: IPFS URI required");
        _baseTokenURI = baseTokenURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev Sets the royalty assessed for token sales using EIP-2981's `royaltyInfo`.
     *
     * * Requirements:
     *
     * - `receiver` is not the zero-address
     * - `percentBIPS` is in [0, 10000]
     * - the caller must have the `ROYALTY_ROLE`.
     */
    function setRoyalty(address receiver, uint256 percentBips) external virtual {
        require(hasRole(ROYALTY_ROLE, _msgSender()), "ERC721Resale: must have royalty role to set royalty");
        _setRoyalty(receiver, percentBips);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function safeMint(address to, uint256 number) public override virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "IBatchMintable: must have minter role to mint");

        for (uint256 i = 0; i < number; i++) {
            _safeMint(to, _tokenIdTracker.current());
            _tokenIdTracker.increment();
        }
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721Enumerable, ERC721Resale)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    // Operator Filterer

    function setFilterOperators(bool _filterOperators) public virtual {
        require(hasRole(ROYALTY_ROLE, _msgSender()), "DefaultOperatorFilterer: must have royalty role to setFilterOperators");
        filterOperators = _filterOperators;
    }

    function setApprovalForAll(address operator, bool approved) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {
        super.setApprovalForAll(operator, approved);
    }

    function approve(address operator, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {
        super.approve(operator, tokenId);
    }

    function transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)
        public
        override(ERC721, IERC721)
        onlyAllowedOperator(from)
    {
        super.safeTransferFrom(from, to, tokenId, data);
    }

    function _checkFilterOperator(address operator) internal view override {
        if (filterOperators) {
            super._checkFilterOperator(operator);
        }
    }
}
