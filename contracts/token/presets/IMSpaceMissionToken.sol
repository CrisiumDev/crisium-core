// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "operator-filter-registry/src/DefaultOperatorFilterer.sol";
import "../extensions/ERC721Resale.sol";
import "../utils/IBatchMintable.sol";
import "../utils/IPFSLibrary.sol";

abstract contract IMSpaceMissionToken is
    Context,
    AccessControlEnumerable,
    DefaultOperatorFilterer,
    ERC721Enumerable,
    ERC721Resale,
    IBatchMintable
{
    using Counters for Counters.Counter;
    using Strings for uint256;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant REVEAL_ROLE = keccak256("REVEAL_ROLE");
    bytes32 public constant ROYALTY_ROLE = keccak256("ROYALTY_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;
    mapping(uint256 => string) private _customTokenURI;

    string public PROVENANCE_HASH = "";
    uint256 public REVEAL_TIMESTAMP;
    uint256 public immutable MAX_SUPPLY;

    uint256 public revealStartingIndexBlock;
    uint256 public revealStartingIndex;

    // Operator filterer
    bool public filterOperators = true;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        string memory name,
        string memory symbol,
        uint256 maxSupply,
        uint256 revealTimestamp
    ) ERC721(name, symbol) {
        MAX_SUPPLY = maxSupply;
        REVEAL_TIMESTAMP = revealTimestamp;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(REVEAL_ROLE, _msgSender());
        _setupRole(ROYALTY_ROLE, _msgSender());
    }

    /**
     * @dev Sets the royalty assessed for token sales using EIP-2981's `royaltyInfo`.
     *
     * * Requirements:
     *
     * - `receiver` is not the zero-address
     * - `percentBIPS` is in [0, 10000]
     * - the caller must have the `ROYALTY_ROLE`.
     */
    function setRoyalty(address receiver, uint256 percentBips) external virtual {
        require(hasRole(ROYALTY_ROLE, _msgSender()), "ERC721Resale: must have royalty role to set royalty");
        _setRoyalty(receiver, percentBips);
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function safeMint(address to, uint256 number) public override virtual {
        require(hasRole(MINTER_ROLE, _msgSender()), "IBatchMintable: must have minter role to mint");
        require(totalSupply() + number <= MAX_SUPPLY, "IBatchMintable: mint would exceed max supply of tokens");

        for (uint256 i = 0; i < number; i++) {
            _safeMint(to, _tokenIdTracker.current());
            _tokenIdTracker.increment();
        }

        if (revealStartingIndexBlock == 0 && (totalSupply() == MAX_SUPPLY || block.timestamp >= REVEAL_TIMESTAMP)) {
            revealStartingIndexBlock = block.number;
        }
    }

    /**
     * Set the time at which reveal starting index is set
     */
    function setRevealTimestamp(uint256 revealTimestamp) public {
        require(hasRole(REVEAL_ROLE, _msgSender()), "IMSpaceMissionToken: must have reveal role to set reveal timestamp");
        REVEAL_TIMESTAMP = revealTimestamp;
    }

    /*
    * Set provenance once it's calculated (hopefully before sale)
    */
    function setProvenanceHash(string memory provenanceHash) public {
        require(hasRole(REVEAL_ROLE, _msgSender()), "IMSpaceMissionToken: must have reveal role to set provenance hash");
        PROVENANCE_HASH = provenanceHash;
    }

    /*
    * Set base URI (after reveal index is set)
    */
    function setBaseURI(string memory baseURI) public {
        require(hasRole(REVEAL_ROLE, _msgSender()), "IMSpaceMissionToken: must have reveal role to set base URI");
        require(IPFSLibrary.uriSeemsValid(baseURI), "ERC721Metadata: IPFS URI required");
        _baseTokenURI = baseURI;
    }

    /*
    * Set custom URI (after reveal index is set, to reveal individual tokens
    * still represented as a placeholder).
    */
    function setTokenURI(uint256 tokenId, string memory customURI) public {
        require(hasRole(REVEAL_ROLE, _msgSender()), "IMSpaceMissionToken: must have reveal role to set token URI");
        require(IPFSLibrary.uriSeemsValid(customURI), "ERC721Metadata: IPFS URI required");
        require(_exists(tokenId), "ERC721: invalid token ID");
        _customTokenURI[tokenId] = customURI;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721: invalid token ID");

        string memory baseURI = _baseURI();
        string memory custom = _customTokenURI[tokenId];

        return bytes(custom).length > 0 ? custom
            : bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString()))
            : "";
    }

    /**
     * Set the starting index for the collection
     */
    function setStartingIndex() public {
        require(revealStartingIndex == 0, "IMSpaceMissionToken: starting index is already set");
        require(revealStartingIndexBlock != 0, "IMSpaceMissionToken: starting index block must be set");

        revealStartingIndex = uint256(blockhash(revealStartingIndexBlock)) % MAX_SUPPLY;
        // Fallback if hash is not available (w/in 256 blocks)
        if (block.number - revealStartingIndexBlock > 255) {
            revealStartingIndex = uint256(blockhash(block.number - 1)) % MAX_SUPPLY;
        }
        // Prevent default sequence
        if (revealStartingIndex == 0) {
            revealStartingIndex = revealStartingIndex + 1;
        }
    }

    /**
     * Set the starting index block for the collection, essentially unblocking
     * setting starting index
     */
    function emergencySetStartingIndexBlock() public {
        require(hasRole(REVEAL_ROLE, _msgSender()), "IMSpaceMissionToken: must have reveal role to set starting index block");
        require(revealStartingIndex == 0, "IMSpaceMissionToken: starting index is already set");

        revealStartingIndexBlock = block.number;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721Enumerable, ERC721Resale)
        returns (bool)
    {
        return interfaceId == type(IBatchMintable).interfaceId || super.supportsInterface(interfaceId);
    }

    // Operator Filterer

    function setFilterOperators(bool _filterOperators) public virtual {
        require(hasRole(ROYALTY_ROLE, _msgSender()), "DefaultOperatorFilterer: must have royalty role to setFilterOperators");
        filterOperators = _filterOperators;
    }

    function setApprovalForAll(address operator, bool approved) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {
        super.setApprovalForAll(operator, approved);
    }

    function approve(address operator, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperatorApproval(operator) {
        super.approve(operator, tokenId);
    }

    function transferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId) public override(ERC721, IERC721) onlyAllowedOperator(from) {
        super.safeTransferFrom(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data)
        public
        override(ERC721, IERC721)
        onlyAllowedOperator(from)
    {
        super.safeTransferFrom(from, to, tokenId, data);
    }

    function _checkFilterOperator(address operator) internal view override {
        if (filterOperators) {
            super._checkFilterOperator(operator);
        }
    }
}
